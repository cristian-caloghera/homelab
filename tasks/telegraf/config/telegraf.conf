[agent]
	omit_hostname = true
	precision = "1s"

[[inputs.mqtt_consumer]]
	servers = ["mqtt://${MQTT_BROKER}"]
	topics = [
		"ems-esp/boiler_data",
		"ems-esp/boiler_data_dhw",
		"ems-esp/thermostat_data",
		"ems-esp/thermostat_data_hc1",
		"ems-esp/thermostat_data_dhw",
		"ems-esp/hearbeat",
	]
	name_prefix = "heater_"
	data_format = "json_v2"

	[[inputs.mqtt_consumer.topic_parsing]]
	    topic = "+/+"
    	measurement = "_/measurement"
    	[inputs.mqtt_consumer.topic_parsing.tagpass]
    		topic = ["ems-esp/*"]

	[[inputs.mqtt_consumer.json_v2]]
		[inputs.mqtt_consumer.json_v2.tagpass]
			topic = ["ems-esp/*"]
		[[inputs.mqtt_consumer.json_v2.object]]
			namepass = ["heater_*"]
			path = "@this"
			disable_prepend_keys = true
			[inputs.mqtt_consumer.json_v2.object.tagpass]
				topic = ["ems-esp/*"]

[[inputs.mqtt_consumer]]
	servers = ["mqtt://${CCU3_MQTT}"]
	topics = [
	    #"device/status/#",
	    "device/status/+/+/ACTUAL_TEMPERATURE",
	    "device/status/+/+/HUMIDITY",
	    "device/status/+/+/ENERGY_COUNTER",
	    "device/status/+/+/ILLUMINATION",
		"device/status/+/+/LEVEL",
		"device/status/+/+/LOW_BAT",
		"device/status/+/+/MOTION",
		"device/status/+/+/OPERATING_VOLTAGE",
	    "device/status/+/+/SET_POINT_TEMPERATURE",
	    "device/status/+/+/WINDOW_STATE",
	]
	data_format = "json_v2"

	[[inputs.mqtt_consumer.topic_parsing]]
	    namepass = ["ccu3_*"]
	    topic = "device/status/+/+/+"
    	measurement = "_/_/_/_/measurement"
        tags = "_/_/device/channel/_"
		[inputs.mqtt_consumer.topic_parsing.tagpass]
    		topic = ["device/status/*"]


	[[inputs.mqtt_consumer.json_v2]]
		[inputs.mqtt_consumer.json_v2.tagpass]
			topic = ["device/status/*"]
		[[inputs.mqtt_consumer.json_v2.field]]
			path = "v"
			[inputs.mqtt_consumer.json_v2.field.tagpass]
				topic = ["device/status/*"]

	# Process metrics using a Starlark script
	[[processors.starlark]]
		source = '''
location_mapping = {
	'INT0000002:1': 'EG Küche/Esszimmer',
	'INT0000003:1': 'EG Wohnzimmer',
	'INT0000004:1': 'KG Büro',
	'INT0000005:1': 'EG Kind 1',
	'INT0000006:1': 'EG Schlafzimmer',
	'INT0000007:1': 'EG Kind 2',
	'INT0000008:1': 'KG Waschraum',
	'INT0000009:1': 'KG Zimmer 1',
	'INT0000010:1': 'KG Zimmer 2',
	'INT0000011:1': 'KG Werkstatt',
	'INT0000012:1': 'EG Bad',
	'INT0000013:1': 'EG Gästebad',
	'INT0000014:1': 'KG Bad',
	'INT0000015:1': 'EG Flur'
}

def apply(metric):
	location_id = ''.join([metric.tags['device'], ':', metric.tags['channel']])
	location = location_mapping.get(location_id)
	if location != None:
		metric.tags['location'] = location

	metric.fields[metric.name] = metric.fields['v']
	metric.fields.pop('v')
	metric.name = 'ccu3_' + metric.name
	return metric
'''
		[processors.starlark.tagpass]
			topic = ["device/status/*"]

#[[outputs.file]]
#	data_format = "influx"

[[outputs.influxdb_v2]]
  urls = ["http://influxdb2:8086"]
  token = "${INFLUXDB2_TOKEN}"
  organization = "${INFLUXDB2_ORG}"
  bucket = "ww29"
